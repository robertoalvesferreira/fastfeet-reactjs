{"ast":null,"code":"import { call, takeLatest, all, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { signInSuccess, signInFailure } from './actions';\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    console.tron.log('antes da chamada');\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    });\n    console.tron.log('Response data ', response.data);\n    const {\n      token\n    } = response.data;\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n    yield put(signInSuccess(token));\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signInFailure());\n    toast.error('Falha na autenticação');\n    history.push('/');\n  }\n}\nexport function* signUp({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password,\n      name\n    } = payload;\n    const response = yield call(api.post, 'users', {\n      name,\n      email,\n      password\n    });\n    console.tron.log(response);\n    history.push('/');\n    toast.success('Cadastrado com sucesso');\n  } catch (err) {\n    toast.error('Falha no cadastro!');\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport default all([takeLatest('persist/REHYDRATE', setToken), takeLatest('@auth/SIGN_IN_REQUEST', signIn), takeLatest('@auth/SIGN_UP_REQUEST', signUp)]);","map":{"version":3,"sources":["/home/roberto/Área de Trabalho/reactjs/fastfeet-reactjs/src/store/modules/auth/sagas.js"],"names":["call","takeLatest","all","put","toast","api","history","signInSuccess","signInFailure","signIn","payload","email","password","console","tron","log","response","post","data","token","defaults","headers","Authorization","push","err","error","signUp","name","success","setToken","auth"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,WAA7C;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AACAG,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,kBAAjB;AACA,UAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACK,GAAG,CAACY,IAAL,EAAW,UAAX,EAAuB;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAvB,CAA3B;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiB,gBAAjB,EAAmCC,QAAQ,CAACE,IAA5C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYH,QAAQ,CAACE,IAA3B;AAEAb,IAAAA,GAAG,CAACe,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASH,KAAM,EAArD;AAEA,UAAMhB,GAAG,CAACI,aAAa,CAACY,KAAD,CAAd,CAAT;AAEAb,IAAAA,OAAO,CAACiB,IAAR,CAAa,YAAb;AACD,GAZD,CAYE,OAAOC,GAAP,EAAY;AACZ,UAAMrB,GAAG,CAACK,aAAa,EAAd,CAAT;AACAJ,IAAAA,KAAK,CAACqB,KAAN,CAAY,uBAAZ;AACAnB,IAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACD;AACF;AACD,OAAO,UAAUG,MAAV,CAAiB;AAAEhB,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBe,MAAAA;AAAnB,QAA4BjB,OAAlC;AACA,UAAMM,QAAQ,GAAG,MAAMhB,IAAI,CAACK,GAAG,CAACY,IAAL,EAAW,OAAX,EAAoB;AAAEU,MAAAA,IAAF;AAAQhB,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAApB,CAA3B;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBC,QAAjB;AACAV,IAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACAnB,IAAAA,KAAK,CAACwB,OAAN,CAAc,wBAAd;AACD,GAND,CAME,OAAOJ,GAAP,EAAY;AACZpB,IAAAA,KAAK,CAACqB,KAAN,CAAY,oBAAZ;AACD;AACF;AACD,OAAO,SAASI,QAAT,CAAkB;AAAEnB,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AAEd,QAAM;AAAES,IAAAA;AAAF,MAAYT,OAAO,CAACoB,IAA1B;;AAEA,MAAIX,KAAJ,EAAW;AACTd,IAAAA,GAAG,CAACe,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASH,KAAM,EAArD;AACD;AACF;AACD,eAAejB,GAAG,CAAC,CACjBD,UAAU,CAAC,mBAAD,EAAsB4B,QAAtB,CADO,EAEjB5B,UAAU,CAAC,uBAAD,EAA0BQ,MAA1B,CAFO,EAGjBR,UAAU,CAAC,uBAAD,EAA0ByB,MAA1B,CAHO,CAAD,CAAlB","sourcesContent":["import { call, takeLatest, all, put } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { signInSuccess, signInFailure } from './actions';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n    console.tron.log('antes da chamada');\n    const response = yield call(api.post, 'sessions', { email, password });\n    console.tron.log('Response data ', response.data);\n    const { token } = response.data;\n\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n\n    yield put(signInSuccess(token));\n\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signInFailure());\n    toast.error('Falha na autenticação');\n    history.push('/');\n  }\n}\nexport function* signUp({ payload }) {\n  try {\n    const { email, password, name } = payload;\n    const response = yield call(api.post, 'users', { name, email, password });\n    console.tron.log(response);\n    history.push('/');\n    toast.success('Cadastrado com sucesso');\n  } catch (err) {\n    toast.error('Falha no cadastro!');\n  }\n}\nexport function setToken({ payload }) {\n  if (!payload) return;\n\n  const { token } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport default all([\n  takeLatest('persist/REHYDRATE', setToken),\n  takeLatest('@auth/SIGN_IN_REQUEST', signIn),\n  takeLatest('@auth/SIGN_UP_REQUEST', signUp),\n]);\n"]},"metadata":{},"sourceType":"module"}